name: Build and Release

on:
  push:
    branches:
      - build
  pull_request:
    branches:
      - build

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          pip install -e .
      
      - name: Run tests
        run: |
          if [ -d tests ]; then
            pytest tests/ -v --cov=src --cov-report=term-missing
          else
            echo "No tests directory found, skipping tests"
          fi

  build:
    name: Build Distribution
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/build'
    
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine
      
      - name: Build wheel and sdist
        run: |
          python -m build
      
      - name: Check distribution
        run: |
          twine check dist/*
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          path: dist/
      
      - name: Generate version
        id: version
        run: |
          # Extract version from pyproject.toml
          if [ -f pyproject.toml ]; then
            VERSION=$(grep -Po '(?<=^version = ")[^"]*' pyproject.toml)
          else
            VERSION="0.1.0"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.version.outputs.version }}
          name: TUI Form Designer v${{ steps.version.outputs.version }}
          body: |
            ## TUI Form Designer v${{ steps.version.outputs.version }}
            
            ### Installation
            ```bash
            pip install https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/tui-form-designer-${{ steps.version.outputs.version }}-py3-none-any.whl
            ```
            
            Or download the wheel and install locally:
            ```bash
            wget https://github.com/${{ github.repository }}/releases/download/v${{ steps.version.outputs.version }}/tui-form-designer-${{ steps.version.outputs.version }}-py3-none-any.whl
            pip install tui-form-designer-${{ steps.version.outputs.version }}-py3-none-any.whl
            ```
            
            ### What's Included
            - TUI Form Designer package
            - All dependencies
            - Documentation
            
            ### Documentation
            See [README.md](https://github.com/${{ github.repository }}/blob/develop/README.md)
          files: |
            dist/*.whl
            dist/*.tar.gz
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  cleanup:
    name: Clean Build Branch
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/build'
    
    steps:
      - uses: actions/checkout@v4
        with:
          ref: build
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Remove development files
        run: |
          # Keep only essential files for production reference
          git rm -rf tests/ || true
          git rm -rf docs/ || true
          git rm -rf .pytest_cache/ || true
          
          # Create minimal README for build branch
          cat > README.md << 'EOF'
          # TUI Form Designer - Build Branch
          
          This branch contains build automation and release artifacts.
          
          ## Installation
          
          Install the latest release:
          ```bash
          pip install tui-form-designer
          ```
          
          Or download from [Releases](https://github.com/${{ github.repository }}/releases).
          
          ## Development
          
          For development, see the [develop branch](https://github.com/${{ github.repository }}/tree/develop).
          EOF
          
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
          git add README.md
          git commit -m "chore: cleanup build branch after release" || true
          git push origin build || true
