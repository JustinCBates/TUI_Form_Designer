name: Build and Release

on:
  push:
    branches:
      - build
  workflow_dispatch:

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest pytest-cov pytest-mock
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
          if [ -f requirements-dev.txt ]; then pip install -r requirements-dev.txt; fi
          pip install -e .

      - name: Run tests
        run: |
          if [ -d tests ]; then
            pytest tests/ --cov --cov-report=term-missing
          else
            echo "No tests directory found, skipping tests"
          fi

  build:
    name: Build Package
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install build tools
        run: |
          python -m pip install --upgrade pip
          pip install build twine

      - name: Extract version from pyproject.toml
        id: version
        run: |
          VERSION=$(python -c "import tomllib; print(tomllib.load(open('pyproject.toml', 'rb'))['project']['version'])")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Package version: $VERSION"

      - name: Build package
        run: |
          python -m build

      - name: Verify package
        run: |
          twine check dist/*
          ls -la dist/

      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: package-artifacts
          path: dist/
          retention-days: 7

    outputs:
      version: ${{ steps.version.outputs.version }}

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/build'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: package-artifacts
          path: dist/

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ needs.build.outputs.version }}
          release_name: Release v${{ needs.build.outputs.version }}
          body: |
            ## Release v${{ needs.build.outputs.version }}
            
            **Installation:**
            ```bash
            pip install https://github.com/${{ github.repository }}/releases/download/v${{ needs.build.outputs.version }}/$(ls dist/*.whl | head -1 | xargs basename)
            ```
            
            **Changes:**
            - See CHANGELOG.md for detailed changes
            - Automated release from build branch
            
            **Files:**
            - Python wheel (.whl) - Recommended for installation
            - Source distribution (.tar.gz) - For development/inspection
          draft: false
          prerelease: false

      - name: Upload Wheel Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/$(ls dist/*.whl | head -1 | xargs basename)
          asset_name: $(ls dist/*.whl | head -1 | xargs basename)
          asset_content_type: application/zip

      - name: Upload Source Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/$(ls dist/*.tar.gz | head -1 | xargs basename)
          asset_name: $(ls dist/*.tar.gz | head -1 | xargs basename)
          asset_content_type: application/gzip

  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [test, build, release]
    if: always()
    steps:
      - name: Cleanup artifacts
        uses: actions/github-script@v6
        with:
          script: |
            console.log('Build and release workflow completed');
            // Artifacts are automatically cleaned up after retention period